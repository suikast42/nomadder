job "observability" {
  type = "service"
  datacenters = ["{{data_center}}"]

  group "grafana" {
    count = 1
    network {
      mode = "bridge"
      port "ui" {
        to = 3000
      }
    }
    service {
          name = "grafana"
          #      port = "ui"
          port = "3000"
          connect {
            sidecar_service {
              proxy {
                upstreams {
                  destination_name = "mimir-1"
                  local_bind_port  = 8000
                }
            }
          }
        }
        tags = [
          "traefik.enable=true",
          "traefik.consulcatalog.connect=true",
          "traefik.http.routers.grafana.tls=true",
          "traefik.http.routers.grafana.rule=Host(`grafana.{{tls_san}}`)",
        ]

        check {
          name     = "health"
          type     = "http"
          port     = "ui"
          path     = "/health"
          interval = "10s"
          timeout  = "2s"
        }
    }
    task "grafana" {
      driver = "docker"
      env {
        GF_AUTH_OAUTH_AUTO_LOGIN= "true"
        GF_PATHS_CONFIG  = "/etc/grafana/grafana2.ini"
        GF_PATHS_PLUGINS = "/data/grafana/plugins"
        GF_SERVER_DOMAIN = "grafana.{{tls_san}}"
        GF_SERVER_ROOT_URL = "https://grafana.{{tls_san}}"
        GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH = "contains(realm_access.roles[*], 'admin') && 'GrafanaAdmin' || contains(realm_access.roles[*], 'editor') && 'Editor' || 'Viewer'"
      }
      config {
        image = "{{registry_dns}}/{{stack_name}}/grafana:{{version_grafana_nomadder}}"
        ports = ["ui"]
      }
      resources {
        cpu    = 1000
        memory = 2048
      }
      template {
         destination = "${NOMAD_SECRETS_DIR}/env.vars"
         env         = true
         change_mode = "restart"
         data        = <<EOF
          {{ '{{' }} with nomadVar "{{nomad_observability_job_path}}" {{ '}}' }}
            GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET    = {{ '{{' }}.keycloak_secret_observability_grafana{{ '}}' }}
          {{ '{{' }} end {{ '}}' }}
          EOF
      }
    }
  }

  group "mimir-1"{

      count = 1
      network {
        mode = "bridge"
        port "api" {
          to = 9009
        }
      }


    service{
      name ="mimir-1"
      port= "9009"
      connect{
        sidecar_service {}
      }
      tags = [
          "traefik.enable=true",
          "traefik.consulcatalog.connect=true",
          "traefik.http.routers.mimir.tls=true",
          "traefik.http.routers.mimir.rule=Host(`mimir.{{tls_san}}`)",
 #         "traefik.http.routers.mimir.middlewares=traefik-forward-auth"
        ]
          check {
            name  = "health"
            type  = "http"
            port ="api"
            path="/ready"
            interval = "10s"
            timeout  = "2s"
          }
      }
      task "mimir-1"{
         driver = "docker"
         config {
         image = "{{registry_dns}}/grafana/mimir:{{version_grafana_mimir}}"
         ports = ["api"]
         args = [
           "-config.file","/config/mimir.yaml"
         ]
        volumes = [
          "local/mimir.tpl:/config/mimir.yaml"
        ]
         }
      resources {
        cpu    = 1000
        memory = 2048
      }

   artifact {
     source      = "https://nexus.{{tls_san}}/repository/raw/config/stack/observability/mimir.yaml"
     mode= "file"
     destination = "local/mimir.tpl"
   }


    template {
      change_mode   = "restart"
      right_delimiter = "++"
      left_delimiter = "++"
      source        = "local/mimir.tpl"
      destination = "local/mimir.yaml"
    }


 #     template {
 #       change_mode   = "restart"
 #       destination = "local/mimir.tpl"
 #       right_delimiter = "++"
 #       left_delimiter = "++"
 #       data        = <<EOH
 #       ++ with nomadVar "{{nomad_observability_job_path}}"  ++
 #         ++ .mimir_config ++
 #        ++ end  ++
 #       EOH
 #       }

    }
  }
}