apiVersion: 1

datasources:
  - name: Mimir
    type: prometheus
    uid: mimir
    access: proxy
    orgId: 1
    url: http://localhost:8000/prometheus
    version: 1
    editable: true
    jsonData:
      manageAlerts: "true"
      httpHeaderName1: 'X-Scope-OrgID'
      alertmanagerUid: 'alertmanager'
      httpMethod: "POST"
      prometheusType: "Mimir"
      prometheusVersion: "{{version_grafana_mimir}}"
      derivedFields:
        - datasourceUid: tempo
          matcherRegex: (?:traceID|trace_id)=(\w+)
          name: TraceID
          url: $${__value.raw}
    secureJsonData:
      httpHeaderValue1: 'demo'
    isDefault: true
  - name: Alertmanager/Mimir
    uid: alertmanager
    type: alertmanager
    access: proxy
    orgId: 1
    url: http://localhost:8000/alertmanager
    version: 1
    editable: true
    jsonData:
      httpHeaderName1: 'X-Scope-OrgID'
      implementation: 'mimir'
    secureJsonData:
      httpHeaderValue1: 'demo'
  - name: Loki
    uid: loki
    type: loki
    access: proxy
    orgId: 1
    url: http://localhost:8001
    version: 1
    editable: true
    jsonData:
      alertmanagerUid: 'alertmanager'
      httpHeaderName1: 'X-Scope-OrgID'
    secureJsonData:
      httpHeaderValue1: 'demo'
  - name: Tempo
    type: tempo
    uid: tempo
    orgId: 1
    url: http://localhost:8002
    version: 1
    # Access mode - proxy (server in the UI) or direct (browser in the UI).
    access: proxy
    jsonData:
      httpMethod: GET
      tracesToLogs:
        datasourceUid: 'loki'
        tags: ['group' ,'job', 'task', 'container', 'namespace']
        mappedTags: [{ key: 'service.name', value: 'service' }]
        mapTagNamesEnabled: false
        spanStartTimeShift: '1h'
        spanEndTimeShift: '1h'
        filterByTraceID: false
        filterBySpanID: false
      tracesToMetrics:
        datasourceUid: 'mimir'
        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        queries:
          - name: 'Sample query'
            query: 'sum(rate(tempo_spanmetrics_latency_bucket{$__tags}[5m]))'
      serviceMap:
        datasourceUid: 'mimir'
      search:
        hide: false
      nodeGraph:
        enabled: true
      lokiSearch:
        datasourceUid: 'loki'