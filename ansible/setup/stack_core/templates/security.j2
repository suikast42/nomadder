job "security" {
  type = "service"
  priority    = 90
 {% if is_env_development %}
  meta {
    run_uuid = "${uuidv4()}"
  }
  {% endif %}
  reschedule {
    delay          = "10s"
    delay_function = "constant"
    unlimited      = true
  }
  update {
      health_check      = "checks"
      # Alloc is marked as unhealthy after this time
      healthy_deadline  = "5m"
      auto_revert  = true
      # Mark the task as healthy after 10s positive check
      min_healthy_time  = "10s"
      # Task is dead after failed checks in 1h
      progress_deadline = "1h"
  }

  datacenters = ["{{data_center}}"]

  group "keycloak-db" {

    restart {
      attempts = 1
      interval = "1h"
      delay = "5s"
      mode = "fail"
    }
    volume "security_postgres_volume" {
      type      = "host"
      source    = "security_postgres_volume"
      read_only = false
    }

    count = 1
    network {
      mode = "bridge"
      port "db" {
        to = 5432
      }
    }

    service {
      name = "security-postgres"
      port = "5432"
      connect {
        sidecar_service {}
        sidecar_task{
          config{
            labels = {
              "com.github.logunifier.application.pattern.key" = "envoy"
            }
          }
        }
      }
     check {
        name     = "security_postgres_ping"
        type     = "script"
        command  = "pg_isready"
        task     = "security_postgres"
        interval = "10s"
        timeout  = "2s"
        check_restart {
          limit = 3
          grace = "30s"
          ignore_warnings = false
        }
      }
    }

    task "security_postgres" {
      volume_mount {
        volume      = "security_postgres_volume"
        destination = "/var/lib/postgresql/data/pgdata"
      }
      driver = "docker"
      env {
        POSTGRES_USER        = "keycloak"
        # tell pg_isready to use this user
        # otherwise a error FATAL:  role "root" does not exist will logged
        # on every check
        PGUSER         = "keycloak"
        POSTGRES_DB          = "keycloak"
        PGDATA               = "/var/lib/postgresql/data/pgdata"
        POSTGRES_INITDB_ARGS = "--encoding=UTF8"
      }
      config {
        image = "{{registry_dns}}/postgres:{{version_postgres_keycloak}}"
        volumes = [
          "local/initddb.sql:/docker-entrypoint-initdb.d/initddb.sql"
        ]
        ports = ["db"]
      }
      resources {
        cpu    = 500
        memory = 512
        memory_max = 32768
      }
      template {
        data = <<EOF
           CREATE SCHEMA IF NOT EXISTS keycloak;
         EOF
        destination = "local/initddb.sql"
      }
      template {
              destination = "${NOMAD_SECRETS_DIR}/env.vars"
              env         = true
              change_mode = "restart"
              data        = <<EOF
      {{ '{{' }}- with nomadVar "{{nomad_security_job_path}}" -{{ '}}' }}
        POSTGRES_PASSWORD    = {{ '{{' }}.keycloak_db_password{{ '}}' }}
      {{ '{{' }}- end -{{ '}}' }}
      EOF
           }
    }
  }

  group "keycloak-ingress" {

    update {
      # keycloak-ingress service has no health checks
      # rely on task_states
      health_check      = "task_states"
      max_parallel      = 1
    }
    restart {
      attempts = 1
      interval = "1h"
      delay = "5s"
      mode = "fail"
    }
    volume "ca_cert" {
      type      = "host"
      source    = "ca_cert"
      read_only = true
    }
    count = 1
    network {
      mode = "bridge"
      port "auth" {
        to = 4181
      }
    }
    service {
      name = "forwardauth"
      port = "auth"
      tags = [
        "traefik.enable=true",
        "traefik.http.routers.forwardauth.entrypoints=https",
        "traefik.http.routers.forwardauth.rule= Path(`/_oauth`)",
        "traefik.http.routers.forwardauth.middlewares=traefik-forward-auth",
        "traefik.http.routers.traefik-forward-auth.tls=true",
        "traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://forwardauth.service.consul:${NOMAD_HOST_PORT_auth}",
        "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders= X-Forwarded-User",
        "traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeadersRegex= ^X-",
        "traefik.http.middlewares.traefik-forward-auth.forwardauth.trustForwardHeader=true",
      #  "traefik.http.middlewares.test-auth.forwardauth.tls.insecureSkipVerify=true"
      ]


    }
      task "await-for-keycloak" {
        driver = "docker"

        config {
          image        = "{{registry_dns}}/busybox:{{version_busy_box_init_container}}"
          command      = "sh"
          args         = ["-c", "echo -n 'Waiting for service keycloak'; until nslookup keycloak.service.consul 2>&1 >/dev/null; do echo '.'; sleep 2; done"]
          #network_mode = "host"
        }

        resources {
          cpu    = 200
          memory = 128
          memory_max = 1024
        }

        lifecycle {
          hook    = "prestart"
          sidecar = false
        }
      }
    task "forwardauth" {
      driver = "docker"
      env {
        #        https://brianturchyn.net/traefik-forwardauth-support-with-keycloak/
        #        https://github.com/mesosphere/traefik-forward-auth/issues/36
        #        INSECURE_COOKIE = "1"
        ENCRYPTION_KEY = "45659373957778734945638459467936" #32 character encryption key
        #        SCOPE = "profile email openid" # scope openid is necessary for keycloak...
        SECRET        = "9e7d7b0776f032e3a1996272c2fe22d2"
        PROVIDER_URI  = "https://security.{{tls_san}}/realms/nomadder"
        #        OIDC_ISSUER   = "https://security.{{tls_san}}/realms/nomadder"
        CLIENT_ID     = "ingress"
        LOG_LEVEL     = "warn"
        # Lifetime of cookie 60s
        LIFETIME = "60"

      }
      volume_mount {
        volume      = "ca_cert"
        destination = "/etc/ssl/certs/"
      }
      config {
        image = "{{registry_dns}}/mesosphere/traefik-forward-auth:{{version_mesosphere}}"
        labels = {
          "com.github.logunifier.application.name" = "mesosphere"
          "com.github.logunifier.application.version" = "{{version_mesosphere}}"
          "com.github.logunifier.application.pattern.key" = "logfmt"
        }
        ports = ["auth"]
      }
      resources {
        cpu    = 500
        memory = 256
        memory_max = 32768
      }
      template {
              destination = "${NOMAD_SECRETS_DIR}/env.vars"
              env         = true
              change_mode = "restart"
              data        = <<EOF
      {{ '{{' }}- with nomadVar "{{nomad_security_job_path}}" -{{ '}}' }}
        CLIENT_SECRET      = {{ '{{' }}.keycloak_ingress_secret{{ '}}' }}
      {{ '{{' }}- end -{{ '}}' }}
      EOF
           }
      }
  }

  group "keycloak" {
    restart {
      attempts = 1
      interval = "1h"
      delay = "5s"
      mode = "fail"
    }
     update {
       max_parallel      = 1
     }
    count = 1
    network {
      mode = "bridge"
      port "ui" {
        to = 8080
      }
    }

    service {
      name = "keycloak"
#      port = "ui"
      port = "8080"
      connect {
        sidecar_service {
          proxy {
            upstreams {
              destination_name = "security-postgres"
              local_bind_port  = 5432
            }
          }
        }
        sidecar_task{
          config{
            labels = {
              "com.github.logunifier.application.pattern.key" = "envoy"
            }
          }
        }
      }
      tags = [
        "traefik.enable=true",
        "traefik.consulcatalog.connect=true",
        "traefik.http.routers.keycloak.tls=true",
        "traefik.http.routers.keycloak.rule=Host(`{{security_dns}}`)",
      ]

      check {
        name  = "health"
        type  = "http"
        port ="ui"
        path="/health"
        interval = "10s"
        timeout  = "2s"
        check_restart {
           limit = 3
           grace = "60s"
           ignore_warnings = false
        }
      }
      check {
        name  = "live"
        type  = "http"
        port ="ui"
        path="/health/live"
        interval = "10s"
        timeout  = "2s"
      }
      check {
        name  = "ready"
        type  = "http"
        port ="ui"
        path="/health/ready"
        interval = "10s"
        timeout  = "2s"
        check_restart {
          limit = 3
          grace = "60s"
          ignore_warnings = false
        }
      }

    }
      task "await-for-security-postgres" {
        driver = "docker"

        config {
          image        = "{{registry_dns}}/busybox:{{version_busy_box_init_container}}"
          command      = "sh"
          args         = ["-c", "echo -n 'Waiting for service security-postgres'; until nslookup security-postgres.service.consul 2>&1 >/dev/null; do echo '.'; sleep 2; done"]
          #network_mode = "host"
        }

        resources {
          cpu    = 200
          memory = 128
          memory_max = 1024
        }

        lifecycle {
          hook    = "prestart"
          sidecar = false
        }
      }
    task "keycloak" {
      driver = "docker"
      env {
        KEYCLOAK_ADMIN  = "admin"
        KC_HTTP_ENABLED= "true"
        KC_HOSTNAME_STRICT_HTTPS="false"
        KC_HEALTH_ENABLED= "true"
        KC_HOSTNAME="security.cloud.private"
        KC_PROXY="edge"
        KC_DB                     = "postgres"
        KC_DB_SCHEMA              = "keycloak"
        KC_DB_USERNAME            = "keycloak"
        KC_DB_URL_HOST            = "${NOMAD_UPSTREAM_IP_security_postgres}"
        KC_DB_URL_PORT            = "${NOMAD_UPSTREAM_PORT_security_postgres}"
      }
      config {
        image = "{{registry_dns}}/{{stack_name}}/keycloak:{{version_keycloak_nomadder}}"
        labels = {
          "com.github.logunifier.application.name" = "keycloak"
          "com.github.logunifier.application.version" = "{{version_keycloak_nomadder}}"
          "com.github.logunifier.application.pattern.key" = "tslevelmsg"
        }
        ports = ["ui"]
        args = [
          "start", "--import-realm" , "--optimized"
        ]
      }
      resources {
        cpu    = 500
        memory = 2048
        memory_max = 32768
      }
    template {
            destination = "${NOMAD_SECRETS_DIR}/env.vars"
            env         = true
            change_mode = "restart"
            data        = <<EOF
    {{ '{{' }}- with nomadVar "{{nomad_security_job_path}}" -{{ '}}' }}
      KEYCLOAK_ADMIN_PASSWORD      = {{ '{{' }}.keycloak_password{{ '}}' }}
      KC_DB_PASSWORD               = {{ '{{' }}.keycloak_db_password{{ '}}' }}
      KC_NOMADDER_CLIENT_SECRET    = {{ '{{' }}.keycloak_ingress_secret{{ '}}' }}
      KC_NOMADDER_CLIENT_SECRET_GRAFANA    = {{ '{{' }}.keycloak_secret_observability_grafana{{ '}}' }}
    {{ '{{' }}- end -{{ '}}' }}
    EOF
         }
    }
  }
}