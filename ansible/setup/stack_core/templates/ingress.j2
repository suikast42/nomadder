#region var definitions
variable "datacenter" {
  type = string
  description = "Deploy to this datacenter"
  default = "{{data_center}}"
}

variable "ingress_http" {
  type = number
  description = "Ingress http port"
  default = 80
}

variable "ingress_https" {
  type = number
  description = "Ingress https port"
  default = 443
}

variable "image" {
  type = string
  description = "Default image"
  default = "{{registry_ip}}:{{registry_port}}/traefik:v{{version_traefik}}"
}
# endregion

job "ingress" {
  datacenters = [var.datacenter]
  type        = "system"
  # only one Traefik instance will be restarted at a time, with 1 minute delay between each such action
  # and automatic rollback to the previous version if the new one doesn't pass the health check
  update {
    max_parallel = 1
    stagger      = "1m"
    auto_revert  = true
  }
  # Nomad will wait for 30s after sending the kill signal to the task before forcefully shutting it down
  # by default it's 10s ( not enough to properly drain connections )
  # and the maximum is limited by the max_kill_timeout setting on the Nomad client ( default 30s)


  group "traefik" {
    volume "cert_ingress" {
      type      = "host"
      source    = "cert_ingress"
      read_only   = true
    }
    volume "ca_cert" {
      type      = "host"
      source    = "ca_cert"
      read_only   = true
    }

    network {
      port "http" {
        static = var.ingress_http
      }
      port "https" {
        static = var.ingress_https
      }
    }


    task "traefik" {
      driver = "docker"
      kill_timeout = "30s"
      service {
        name = "traefik"
        tags = [
          "traefik.enable=true",
       #   "traefik.http.routers.traefik.rule=Host(`{{tls_san}}`) && (PathPrefix(`/ingress`) || PathPrefix(`/api`))",
          "traefik.http.routers.traefik.rule=Host(`ingress.{{tls_san}}`)",

          #### set traefik dashboard
          "traefik.http.routers.traefik.service=api@internal",

          #### set middlewares: stripprefix for dashboard
    #      "traefik.http.routers.traefik.middlewares=traefik-strip",
    #      "traefik.http.middlewares.traefik-strip.stripprefix.prefixes=/ingress",

          #### set TLS
          "traefik.http.routers.traefik.tls=true",
  {% if enable_oauth_middleware %}
          "traefik.http.routers.traefik.middlewares=traefik-forward-auth"
  {% endif %}
        ]
        check {
          name     = "alive"
          type     = "tcp"
          port     = "http"
          interval = "10s"
          timeout  = "2s"
        }
      }
      volume_mount {
        volume      = "cert_ingress"
        destination = "{{base_cert_dir}}/ingress"
      }
      volume_mount {
        volume      = "ca_cert"
        destination = "{{base_cert_dir}}/ca"
      }

      config {
        image        = var.image
        network_mode = "host"
        volumes = [
          "local/traefik.toml:/etc/traefik/traefik.toml",
          "local/certconfig.toml:/etc/traefik/certconfig.toml"
        ]
        ports = ["http", "https"]
      }
            template {
              right_delimiter = "++"
              left_delimiter = "++"
              data = <<EOF
[http.serversTransports]
[http.serversTransports.default]
  insecureSkipVerify = false
  rootCAs = ["{{base_cert_dir}}/ca/ca.crt","{{base_cert_dir}}/ca/cluster-ca.crt"]
      [[http.serversTransports.default.certificates]]
      certFile = "{{base_cert_dir}}/ingress/nomad-ingress.pem"
      keyFile = "{{base_cert_dir}}/ingress/nomad-ingress-key.pem"

[tls.stores]
  [tls.stores.default]
    [tls.stores.default.defaultCertificate]
      certFile = "{{base_cert_dir}}/ingress/nomad-ingress.pem"
      keyFile = "{{base_cert_dir}}/ingress/nomad-ingress-key.pem"

[[tls.certificates]]
  certFile = "{{base_cert_dir}}/ingress/nomad-ingress.pem"
  keyFile = "{{base_cert_dir}}/ingress/nomad-ingress-key.pem"
  stores = ["default"]



[http.services]
# Service to nomad
  [http.services.nomad.loadBalancer]
    serversTransport = "default"
    [[http.services.nomad.loadBalancer.servers]]
      url = "https://{{master_ip}}:4646"
# Service to consul
  [http.services.consul.loadBalancer]
   serversTransport = "default"
    [[http.services.consul.loadBalancer.servers]]
      url = "https://{{master_ip}}:8501"

# Service to vault
  [http.services.vault.loadBalancer]
   serversTransport = "default"
    [[http.services.vault.loadBalancer.servers]]
      url = "https://{{master_ip}}:8200"

# Service to nexus ui
  [http.services.nexus-ui.loadBalancer]
   serversTransport = "default"
    [[http.services.nexus-ui.loadBalancer.servers]]
      url = "http://{{master_ip}}:5002"

# Service to nexus push
#  [http.services.nexus-push.loadBalancer]
#   serversTransport = "default"
#    [[http.services.nexus-push.loadBalancer.servers]]
#      url = "http://{{master_ip}}:5001"

 # Service to nexus pull
   [http.services.nexus-pull.loadBalancer]
    serversTransport = "default"
     [[http.services.nexus-pull.loadBalancer.servers]]
       url = "http://{{master_ip}}:5000"

[http.routers]
# Route to consul ui
  [http.routers.consul]
     entryPoints = ["https"]
     rule = "Host(`consul.{{tls_san}}`) "
     service = "consul"
 {% if enable_oauth_middleware %}
     middlewares = ["traefik-forward-auth@consulcatalog"]
 {% endif %}
       # will terminate the TLS request
 #     [http.routers.consul.tls]
      [[http.routers.consul.tls.domains]]
 #       main = "{{tls_san}}"
        sans = ["consul.{{tls_san}}"]

# Route to nomad ui
  [http.routers.nomad]
    entryPoints = ["https"]
    rule = "Host(`nomad.{{tls_san}}`) "
    service = "nomad"
 {% if enable_oauth_middleware %}
     middlewares = ["traefik-forward-auth@consulcatalog"]
 {% endif %}
    [[http.routers.nomad.tls.domains]]
      #main = "{{tls_san}}"
      sans = ["nomad.{{tls_san}}"]

# Route to vault ui
  [http.routers.vault]
    entryPoints = ["https"]
    rule = "Host(`vault.{{tls_san}}`) "
    service = "vault"
 {% if enable_oauth_middleware %}
     middlewares = ["traefik-forward-auth@consulcatalog"]
 {% endif %}
    [[http.routers.vault.tls.domains]]
      sans = ["vault.{{tls_san}}"]

# Route to nexus ui
  [http.routers.nexus-ui]
    entryPoints = ["https"]
    rule = "Host(`nexus.{{tls_san}}`) "
    service = "nexus-ui"
    [[http.routers.nexus-ui.tls.domains]]
      sans = ["nexus.{{tls_san}}"]

# Route to nexus pull
  [http.routers.nexus-pull]
    entryPoints = ["https"]
  #  rule = "Host(`registry.{{tls_san}}`)  && Method(`GET`,`HEAD`)"
    rule = "Host(`registry.{{tls_san}}`)"
    service = "nexus-pull"
    [[http.routers.nexus-pull.tls.domains]]
      sans = ["registry.{{tls_san}}"]

# Route to nexus push
#  [http.routers.nexus-push]
#    entryPoints = ["https"]
#    rule = "Host(`registry.{{tls_san}}`) && Method(`POST`,`PUT`,`DELETE`,`PATCH`)"
#    service = "nexus-push"
#    [[http.routers.nexus-push.tls.domains]]
#      sans = ["registry.{{tls_san}}"]

              EOF
              destination = "local/certconfig.toml"
            }
      template {
        right_delimiter = "++"
        left_delimiter = "++"
        data = <<EOF
[entryPoints]
    [entryPoints.http]
    address = ":80"
    [entryPoints.http.http.redirections]
      [entryPoints.http.http.redirections.entryPoint]
        to = "https"
        scheme = "https"
    [entryPoints.https]
    address = ":443"

[api]
    dashboard = true
    insecure  = true
    debug = false
[providers]
  [providers.file]
    filename = "/etc/traefik/certconfig.toml"
     debugLogGeneratedTemplate = true
     watch = true

# Enable Consul Catalog configuration backend.
[providers.consulCatalog]
    prefix           = "traefik"
    exposedByDefault = false
    connectAware = true
    connectByDefault = false
    watch = true
    # applied if no traefik.http.routers.{name-of-your-choice}.rule  tag found
    defaultRule = "Host(`{{'{{'}} .Name {{'}}'}}.{{tls_san}}`)"

  [providers.consulCatalog.endpoint]
      address = "127.0.0.1:8501"
      scheme  = "https"


[providers.consulCatalog.endpoint.tls]
  ca = "{{base_cert_dir}}/ca/cluster-ca.crt"
  cert = "{{base_cert_dir}}/ingress/nomad-ingress.pem"
  key = "{{base_cert_dir}}/ingress/nomad-ingress-key.pem"

[tracing]
  [tracing.zipkin]
    httpEndpoint = "http://tempo-zipkin.service.consul:9411/api/v2/spans"
    #httpEndpoint = "http://10.21.21.42:9411/api/v2/spans"
    sameSpan = true
    id128Bit = true

[metrics]
  [metrics.prometheus]
    buckets = [0.1,0.3,1.2,5.0,7.5,9.5,9.9]
    addEntryPointsLabels = true
    addRoutersLabels = true
    addServicesLabels = true
[accessLog]
  filePath = "/logs/access.log"
  format = "json"

[experimental.plugins.traefik-add-trace-id]
  moduleName = "github.com/trinnylondon/traefik-add-trace-id"
  version = "v0.1.5"

[http]
  [http.middlewares]
    [http.middlewares.my-traefik-add-trace-id]
      [http.middlewares.my-traefik-add-trace-id.plugin]
        [http.middlewares.my-traefik-add-trace-id.plugin.traefik-add-trace-id]
          headerName = "X-Trace-Id"
          headerPrefix = ""
          verbose = "true"

[log]
  level = "DEBUG"
#  format = "json"

EOF

        destination = "local/traefik.toml"
      }

      resources {
        cpu    = 100
        memory = 128
      }
    }
  }
}
