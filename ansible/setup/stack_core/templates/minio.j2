job "minio" {
  datacenters = ["{{data_center}}"]
  type = "service"
  reschedule {
    delay          = "10s"
    delay_function = "constant"
    unlimited      = true
  }

  group "minio" {

    count = 1
    volume "stack_core_minio_volume" {
      type      = "host"
      source    = "core_minio_volume"
      read_only = false
    }
   volume "ca_cert" {
      type      = "host"
      source    = "ca_cert"
      read_only = true
    }
    restart {
      attempts = -1
      interval = "5s"
      delay = "5s"
      mode = "delay"
    }
    network {
      mode = "bridge"
      port "http" {
        to = 9000
      }
      port "console" {
        to = 9001
      }
    }

    task "minio" {
      volume_mount {
         volume      = "stack_core_minio_volume"
         destination = "/data"
      }
      volume_mount {
        volume      = "ca_cert"
        # the server searches in the /CAs path at that specified directory.
        # Do not change the sub folder name CAs
        destination = "/certs/CAs"
      }
      driver = "docker"

      config {
        image = "{{registry_dns}}/minio/minio:{{version_minio}}"
        command = "server"
        args = [
          "/data",
          "--console-address",
          ":9001",
          "--certs-dir",
          "/certs"
          ]
         ports = ["http","console"]
      }

     env {
        HOSTNAME = "${NOMAD_ALLOC_NAME}"
        MINIO_SERVER_URL = "https://minio.{{tls_san}}"
        #MINIO_IDENTITY_OPENID_CONFIG_URL="https://security.{{tls_san}}/realms/nomadder/.well-known/openid-configuration"
        #MINIO_IDENTITY_OPENID_CLIENT_ID="minio"
        #MINIO_IDENTITY_OPENID_CLIENT_SECRET="u1wDFQh8pJgg8DyY6DGNc6yoW0SJnfg3"
        #MINIO_IDENTITY_OPENID_CLAIM_NAME= "groups"
        ##MINIO_IDENTITY_OPENID_CLAIM_PREFIX="mino."
        ## MINIO_IDENTITY_OPENID_COMMENT="<string>"
        #MINIO_IDENTITY_OPENID_SCOPES="openid,profile,email"
        #MINIO_IDENTITY_OPENID_REDIRECT_URI="https://minio.console.{{tls_san}}/oauth_callback"
        MINIO_PROMETHEUS_AUTH_TYPE = "public"
        MINIO_PROMETHEUS_URL     = "http://mimir.service.consul:9009/prometheus"
        MINIO_PROMETHEUS_JOB_ID  = "integrations/minio"
       # CONSOLE_PROMETHEUS_URL     = "http://mimir.service.consul:9009/prometheus"
       # CONSOLE_MINIO_REGION     = "{{data_center}}"
       # CONSOLE_PROMETHEUS_JOB_ID  = "integrations/minio"
      }
    template {
       destination = "${NOMAD_SECRETS_DIR}/env.vars"
       env         = true
       change_mode = "restart"
       data        = <<EOF
       {{ '{{' }}- with nomadVar "{{nomad_minio_job_path}}" -{{ '}}' }}
          MINIO_ROOT_USER      = {{ '{{' }}.minio_root_user{{ '}}' }}
          MINIO_ROOT_PASSWORD  =  {{ '{{' }}.minio_root_password{{ '}}' }}
        {{ '{{' }}- end -{{ '}}' }}
       EOF
    }

      resources {
        cpu= 500
        memory = 512
        memory_max = 4096
      }

      service {
        port = "http"
        name = "minio"
        tags = [
         "prometheus_minio",
         "frontend",
         "minio",
         "prometheus:server=${NOMAD_ALLOC_NAME}",
         "prometheus:version={{version_minio}}",
         "traefik.enable=true",
         "traefik.consulcatalog.connect=false",
         "traefik.http.routers.minio.tls=true",
         "traefik.http.routers.minio.rule=Host(`minio.{{tls_san}}`)",
        ]

      check {
        name      = "minio-live"
        type     = "http"
        path     = "/minio/health/live"
        port     = "http"
        interval = "10s"
        timeout  = "2s"
      }
      check {
          name      = "minio-ready"
          type     = "http"
          path     = "/minio/health/ready"
          port     = "http"
          interval = "15s"
          timeout  = "4s"
       }
     }
      service {
           port = "console"
           name = "minio-console"
           tags = [
             "console",
             "minio",
             "traefik.enable=true",
             "traefik.consulcatalog.connect=false",
             "traefik.http.routers.minio-console.tls=true",
             "traefik.http.routers.minio-console.rule=Host(`minio.console.{{tls_san}}`)",
           ]
           check {
             type     = "http"
             path     = "/"
             port     = "console"
             interval = "30s"
             timeout  = "2s"
           }
         }
      }
  }
}