required_plugins = %w(vagrant-vmware-esxi vagrant-reload vagrant-timezone)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

$esxi_host=ENV['ESXI_HOST']
$esxi_username=ENV['ESXI_USER']
$esxi_password=ENV['ESXI_PASS']

$vm_base_box="suikast42/ubuntu-24.04_64"
$vm_base_box_version="1.0.0"

$vm_mem_provision = 8096 # 8 GB RAM for master
$vm_cpus_provision = 4
$vm_hostname_provision = "provision"
$vm_provision_ip = "192.168.30.120"


$vm_mem_master_01 = 8096 # 8 GB RAM for master
$vm_cpus_master_01 = 4
$vm_hostname_master_01 = "master-01"
$vm_master_01_ip = "192.168.30.121"


$vm_mem_worker_01 = 8096 # 8 GB RAM ( increase this after setup )
$vm_cpus_worker_01 = 4 # ( increase this after setup )
$vm_hostname_worker_01 = "worker-01"
$vm_worker_01_ip = "192.168.30.124"




Vagrant.configure("2") do |config|
  # common settings for server and agent
  config.vm.box = $vm_base_box
  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.ssh.insert_key = false
  vagrant_home_path = ENV["VAGRANT_HOME"] ||= "#{ENV["USERPROFILE"]}/.vagrant.d"
  config.ssh.private_key_path = ["#{vagrant_home_path}/insecure_private_key", "../../ssh/id_rsa"]


  # create new user, add it to sudoers and allow ssh login over key
  # TODO Vuru: Somehow the ssh login with winscp not works without a password.
  # Set it with  usermod --password $(echo cloudmaster | openssl passwd -1 -stdin) cloudmaster
  config.vm.provision :shell, privileged: true do |s|
    vm_user = "cloudmaster"
    ssh_pub_key = File.readlines("../../ssh/id_rsa.pub").first.strip
    s.inline = <<-SHELL
          rm  /home/$USER/.ssh/authorized_keys
          useradd -m -s /bin/bash -U #{vm_user} -p #{vm_user}
          usermod --password $(echo cloudmaster | openssl passwd -1 -stdin) cloudmaster
          mkdir /home/#{vm_user}/.ssh
          echo #{ssh_pub_key} >> /home/#{vm_user}/.ssh/authorized_keys
          chown -R #{vm_user}:#{vm_user} /home/#{vm_user}
          echo "%#{vm_user} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/#{vm_user}
      SHELL
  end

   config.timezone.value = :host
  # #provisioner node ( TMP Solution somehow ansible does not connect to the VMS from WSL2 )
  # config.vm.define "provisioner" do |provcfg|
  #     provcfg.vm.hostname = $vm_hostname_provision
  #     provcfg.vm.network :private_network, ip: $vm_provision_ip, :netmask => "255.255.255.0"
  #     provcfg.vm.box_version = $vm_base_box_version
  #     provcfg.vm.provider :vmware_esxi  do |esxi|
  #        esxi.esxi_hostname = $esxi_host
  #        esxi.esxi_username = $esxi_username
  #        esxi.esxi_password = $esxi_password
  #        esxi.guest_memsize = $vm_mem_provision
  #        esxi.guest_numvcpus = $vm_cpus_provision
  #        esxi.esxi_virtual_network = ['TDP-Intern']
  #        esxi.esxi_disk_store = 'datastore0'
  #        esxi.guest_autostart ="true"
  #        esxi.debug ="true"
  #      end
  # end

  #master
  config.vm.define "master_01" do |mastercfg|
      mastercfg.vm.hostname = $vm_hostname_master_01
      mastercfg.vm.network :private_network, ip: $vm_master_01_ip, :netmask => "255.255.255.0"
      mastercfg.vm.box_version = $vm_base_box_version
      mastercfg.vm.provider :vmware_esxi  do |esxi|
         esxi.esxi_hostname = $esxi_host
         esxi.esxi_username = $esxi_username
         esxi.esxi_password = $esxi_password
         esxi.guest_memsize = $vm_mem_master_01
         esxi.guest_numvcpus = $vm_cpus_master_01
         esxi.esxi_virtual_network = ['TDP-Intern','TDP-Intern']
         esxi.esxi_disk_store = 'datastore0'
         esxi.guest_autostart ="true"
         esxi.debug ="true"
      end
  end

  #worker
  config.vm.define "worker_01" do |mastercfg|
      mastercfg.vm.hostname = $vm_hostname_worker_01
      mastercfg.vm.network :private_network, ip: $vm_worker_01_ip, :netmask => "255.255.255.0"
      mastercfg.vm.box_version = $vm_base_box_version
      mastercfg.vm.provider :vmware_esxi  do |esxi|
         esxi.esxi_hostname = $esxi_host
         esxi.esxi_username = $esxi_username
         esxi.esxi_password = $esxi_password
         esxi.guest_memsize = $vm_mem_worker_01
         esxi.guest_numvcpus = $vm_cpus_worker_01
         esxi.esxi_virtual_network = ['TDP-Intern','TDP-Intern']
         esxi.esxi_disk_store = 'datastore0'
         esxi.guest_autostart ="true"
         esxi.debug ="true"
      end
  end

  # Somehow this part is not working with bento image provisioning
  # Let's do it self
  $disk_resize = <<-SHELL
        echo "Full disk capacity for /dev/sda3"
        # Increase the Physical Volume (pv) to max size
        pvresize /dev/sda3
        # Expand the Logical Volume (LV) to max size to match
        lvresize -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv
        # Expand the filesystem itself
        resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv
  SHELL
  config.vm.provision "shell", inline: $disk_resize, privileged: true

end
